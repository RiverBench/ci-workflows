name: "Release"
on:
  workflow_call: {}

jobs:
  wait:
    uses: RiverBench/ci-workflows/.github/workflows/wait-for-rate-limit.yaml@main
    # Skip CI if this is the template repository.
    if: github.repository != 'RiverBench/category-template'
    secrets: inherit
    with:
      needed-calls: 200

  release:
    name: "Package and release category"
    needs: wait
    runs-on: "ubuntu-latest"
    container: ghcr.io/riverbench/ci-worker:main
    # Force only one package job to execute at a time per ref, to avoid duplicating work.
    concurrency: 
      group: package-category-${{ github.ref }}
      # Cancel any in-progress jobs if a new one is queued.
      cancel-in-progress: true
    permissions: write-all

    steps:
      - name: "Checkout category repository"
        uses: actions/checkout@v4
        with:
          path: category

      - name: Fetch the schema repository
        uses: actions/checkout@v4
        with:
          repository: 'RiverBench/schema'
          path: schema

      - name: Fetch the main repository
        uses: actions/checkout@v4
        with:
          repository: 'RiverBench/RiverBench'
          path: main

      - name: "Restore CI cache"
        uses: actions/cache/restore@v4
        with:
          path: ./.ci-cache
          key: ci-cache-${{ github.ref }}-???
          restore-keys: ci-cache-${{ github.ref }}-

      - name: "Package the category"
        run: |
          if [ "$GITHUB_REF_NAME" = "main" ]; then VERSION="dev"; else VERSION="${GITHUB_REF_NAME#v}"; fi
          mkdir package_out
          ci-worker package-category "${VERSION}" category main schema package_out

      - name: "Generate documentation"
        run: |
          mkdir doc_out
          ci-worker category-doc-gen package_out category schema doc_out
          mkdir release
          mv package_out/tasks/*.* release/ || true
          mv package_out/profiles/*.* release/
          mv package_out/category/metadata.* release/
          mv package_out/dump.jelly release/ || true
          mv doc_out/category/README.md . || true
          tar -czf release/docs.tar.gz -C doc_out .

      - name: "Save CI cache"
        uses: actions/cache/save@v4
        with:
          path: ./.ci-cache
          key: ci-cache-${{ github.ref }}-${{ hashFiles('./.ci-cache/**') }}

      - name: Upload the README artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: readme
          path: README.md

      - name: Upload the pre-release
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          prerelease: true
          draft: false
          makeLatest: false
          tag: "dev"
          name: "Development pre-release"
          artifacts: 'release/*'
          removeArtifacts: true
          generateReleaseNotes: true
          artifactErrorsFailBuild: true

      - name: Upload the tagged release
        if: github.ref != 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          draft: false
          makeLatest: true
          tag: "${{ env.GITHUB_REF_NAME }}"
          name: "${{ env.GITHUB_REF_NAME }}"
          artifacts: 'release/*'
          generateReleaseNotes: true
          artifactErrorsFailBuild: true

  trigger-doc-update:
    needs: release
    name: "Trigger documentation update"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Trigger repository_dispatch (dev release)"
        if: github.ref == 'refs/heads/main'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_DOC_REPO_HOOKS }}
          repository: RiverBench/riverbench.github.io
          event-type: category-doc-update
          client-payload: '{ "repo": "${{ github.repository }}", "tag": "dev" }'

      - name: "Trigger repository_dispatch (tagged release)"
        if: github.ref != 'refs/heads/main'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_DOC_REPO_HOOKS }}
          repository: RiverBench/riverbench.github.io
          event-type: category-doc-update
          client-payload: '{ "repo": "${{ github.repository }}", "tag": "${{ github.ref_name }}" }'

  update-readme:
    needs: release
    if: github.ref == 'refs/heads/main'
    name: "Update README.md"
    runs-on: "ubuntu-latest"
    permissions: write-all
    steps:
      - name: "Checkout category repository"
        uses: actions/checkout@v4

      - name: Restore README.md
        uses: actions/download-artifact@v4
        with:
          name: readme

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          message: 'Automatic update of README.md'
          default_author: github_actions
          add: 'README.md'
          push: true

  trigger-category-update:
    needs: update-readme
    name: "Trigger category update in the main repository"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Trigger repository_dispatch"
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_MAIN_REPO_HOOKS }}
          repository: RiverBench/RiverBench
          event-type: category-update
          client-payload: '{"repo": "${{ github.repository }}" }'
